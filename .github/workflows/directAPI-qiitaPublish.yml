name: Publish to Qiita (API)

on:
  workflow_dispatch:
  push:
    paths:
      - "articles/**"
    branches: [ "main" ]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Show workspace files
        run: |
          pwd
          ls -la
          ls -la "$GITHUB_WORKSPACE/articles" || true
          sed -n '1,25p' "$GITHUB_WORKSPACE/articles/firstStep-post.md" || true

      - name: Post one file to Qiita via API
        env:
          QIITA_TOKEN: ${{ secrets.QIITA_TOKEN }}
          FILE: articles/firstStep-post.md
        shell: bash
        run: |
          set -euo pipefail
          node - <<'NODE'
          const fs = require('fs');
          const path = process.env.FILE;
          const token = process.env.QIITA_TOKEN;
          const summary = process.env.GITHUB_STEP_SUMMARY;

          const txt = fs.readFileSync(path, 'utf8');
          const lines = txt.split(/\r?\n/);
          if (lines[0].trim() !== '---') { console.error('Front matter not found'); process.exit(1); }
          let i = 1, fm = [];
          while (i < lines.length && lines[i].trim() !== '---') { fm.push(lines[i]); i++; }
          if (i >= lines.length) { console.error('Front matter not closed'); process.exit(1); }
          const body = lines.slice(i + 1).join('\n');
          const y = fm.join('\n');

          const titleMatch = y.match(/^title:\s*(.+)\s*$/m);
          const title = titleMatch ? titleMatch[1].replace(/^"|"$/g,'').trim() : '';
          if (!title) { console.error('title missing in front matter'); process.exit(1); }

          const priv = ((y.match(/^private:\s*(true|false)\s*$/m)||[])[1] === 'true');

          const tags = [];
          const tagRe = /^\s*-\s*name:\s*(.+)\s*$/mg;
          let m;
          while ((m = tagRe.exec(y))) { tags.push({ name: m[1].trim(), versions: [] }); }
          if (!tags.length) { console.error('tags not found'); process.exit(1); }

          (async () => {
            const res = await fetch('https://qiita.com/api/v2/items', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
              },
              body: JSON.stringify({ title, body, tags, private: priv })
            });
            const data = await res.json();
            console.log('Status', res.status);
            console.log('URL:', data.url);
            console.log('ID:', data.id);
            fs.appendFileSync(summ

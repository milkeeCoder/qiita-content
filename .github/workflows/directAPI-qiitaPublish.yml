name: Publish/Update to Qiita (API, safe)

on:
  workflow_dispatch:
  push:
    paths: [ "articles/**" ]
    branches: [ "main" ]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Debug - show files
        run: |
          pwd
          ls -la
          ls -la "$GITHUB_WORKSPACE/articles" || true

      # スクリプトを書き出し（1ファイルずつ処理）
      - name: Prepare script
        shell: bash
        run: |
          cat > post_or_patch_safe.js <<'EOF'
          const fs = require('fs');

          const file = process.argv[2];
          const token = process.env.QIITA_TOKEN;
          const summary = process.env.GITHUB_STEP_SUMMARY;

          function addSummary(s){ fs.appendFileSync(summary, s + '\n'); }

          if (!file) { console.error('No file path'); process.exit(1); }
          const txt = fs.readFileSync(file, 'utf8');
          const lines = txt.split(/\r?\n/);
          if (lines[0].trim() !== '---') { addSummary(`### ❌ Skip: ${file} (no front matter)`); process.exit(0); }
          let i = 1, fm = [];
          while (i < lines.length && lines[i].trim() !== '---') { fm.push(lines[i]); i++; }
          if (i >= lines.length) { addSummary(`### ❌ Skip: ${file} (front matter not closed)`); process.exit(0); }

          const body = lines.slice(i + 1).join('\n');
          const y = fm.join('\n');

          const get = (re) => (y.match(re) || [])[1];

          const title = (get(/^title:\s*(.+)\s*$/m) || '').replace(/^"|"$/g,'').trim();
          if (!title) { addSummary(`### ❌ Skip: ${file} (title missing)`); process.exit(0); }

          // 誤公開防止フラグ: publish: true の時だけ投稿/更新
          const publishFlag = (get(/^publish:\s*(true|false)\s*$/m) === 'true');
          if (!publishFlag) {
            addSummary(`### ⏭️ Skip: ${title}  (publish: true が未設定)`);
            process.exit(0);
          }

          // 既存IDがあれば更新
          const id = (get(/^qiita_id:\s*(.+)\s*$/m) || '').replace(/^"|"$/g,'').trim();

          // タグ
          const tags = [];
          const tagRe = /^\s*-\s*name:\s*(.+)\s*$/mg;
          let m; while ((m = tagRe.exec(y))) tags.push({ name: m[1].trim(), versions: [] });
          if (!tags.length) { addSummary(`### ❌ Skip: ${title} (tags missing)`); process.exit(0); }

          // private: 未指定なら true（安全側）
          const privMatch = y.match(/^private:\s*(true|false)\s*$/m);
          const priv = privMatch ? (privMatch[1] === 'true') : true;

          (async () => {
            const payload = { title, body, tags, private: priv };
            const endpoint = id
              ? `https://qiita.com/api/v2/items/${encodeURIComponent(id)}`
              : 'https://qiita.com/api/v2/items';
            const method = id ? 'PATCH' : 'POST';

            const res = await fetch(endpoint, {
              method,
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
              },
              body: JSON.stringify(payload)
            });

            const data = await res.json().catch(() => ({}));
            if (res.ok) {
              addSummary(`### ✅ ${id ? 'Updated' : 'Created'}: ${title}\n- URL: ${data.url}\n- ID: \`${data.id}\`\n`);
            } else {
              addSummary(`### ❌ Failed: ${title}\n- Status: ${res.status}\n- Snippet: \`${JSON.stringify(data).slice(0,300)}\``);
              process.exit(1);
            }
          })().catch(e => { console.error(e); process.exit(1); });
          EOF

      - name: Publish/Update markdowns under articles/ (safe)
        env:
          QIITA_TOKEN: ${{ secrets.QIITA_TOKEN }}
        shell: bash
        run: |
          set -e
          shopt -s nullglob
          files=( "$GITHUB_WORKSPACE"/articles/*.md )
          if [ ${#files[@]} -eq 0 ]; then
            echo "No .md files found under articles/"; exit 1; fi

          any_published=0
          for f in "${files[@]}"; do
            echo "Processing $f"
            node post_or_patch_safe.js "$f" && any_published=1 || true
          done

          # ここではジョブを落とさない（skipのみでも成功扱い）
          exit 0

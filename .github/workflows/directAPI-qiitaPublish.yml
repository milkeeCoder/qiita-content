name: Publish to Qiita (API)

on:
  workflow_dispatch:
  push:
    paths: [ "articles/**" ]
    branches: [ main ]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Show workspace files
        run: |
          pwd
          ls -la
          ls -la "$GITHUB_WORKSPACE/articles" || true
          sed -n '1,25p' "$GITHUB_WORKSPACE/articles/firstStep-post.md" || true

      # Qiita APIに直接投稿（front matter をパースして JSON を組み立てます）
            - name: Post one file to Qiita via API
        env:
          QIITA_TOKEN: ${{ secrets.QIITA_TOKEN }}
          FILE: articles/firstStep-post.md
        run: |
          set -euo pipefail
          node - <<'NODE'
          const fs = require("fs");
          const path = process.env.FILE;
          const token = process.env.QIITA_TOKEN;
          const summary = process.env.GITHUB_STEP_SUMMARY;

          const txt = fs.readFileSync(path, "utf8");
          const lines = txt.split(/\r?\n/);
          if (lines[0].trim() !== "---") throw new Error("Front matter not found");
          let i = 1, fm = [];
          while (i < lines.length && lines[i].trim() !== "---") { fm.push(lines[i]); i++; }
          if (i >= lines.length) throw new Error("Front matter not closed");
          const body = lines.slice(i + 1).join("\n");
          const y = fm.join("\n");

          const title = (y.match(/^title:\s*(.+)\s*$/m)||[])[1]?.replace(/^"|"$/g,"")?.trim();
          if (!title) throw new Error("title missing in front matter");

          const priv = ((y.match(/^private:\s*(true|false)\s*$/m)||[])[1] === "true");
          const tags = [];
          const tagRe = /^\s*-\s*name:\s*(.+)\s*$/mg;
          let m; while ((m = tagRe.exec(y))) tags.push({ name: m[1].trim(), versions: [] });
          if (!tags.length) throw new Error("tags not found");

          (async () => {
            const res = await fetch("https://qiita.com/api/v2/items", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Authorization": "Bearer " + token
              },
              body: JSON.stringify({ title, body, tags, private: priv })
            });
            const data = await res.json();
            console.log("Status", res.status);
            console.log("URL:", data.url);
            console.log("ID:", data.id);
            fs.appendFileSync(summary, `### ✅ Posted: ${title}\n\n- URL: ${data.url}\n- ID: \`${data.id}\`\n`);
            if (!res.ok) process.exit(1);
          })().catch(e => { console.error(e); process.exit(1); });
          NODE
